### Polywrap Header START ###
scalar UInt
scalar UInt8
scalar UInt16
scalar UInt32
scalar Int
scalar Int8
scalar Int16
scalar Int32
scalar Bytes
scalar BigInt
scalar BigNumber
scalar JSON
scalar Map

directive @imported(
  uri: String!
  namespace: String!
  nativeType: String!
) on OBJECT | ENUM

directive @imports(
  types: [String!]!
) on OBJECT

directive @capability(
  type: String!
  uri: String!
  namespace: String!
) repeatable on OBJECT

directive @enabled_interface on OBJECT

directive @annotate(type: String!) on FIELD

directive @env(required: Boolean!) on FIELD_DEFINITION

### Polywrap Header END ###

type Module @imports(
  types: [
    "Near_Module",
    "Near_PublicKey",
    "Near_KeyType",
    "Near_Signature",
    "Near_Action",
    "Near_AccessKey",
    "Near_AccessKeyPermission",
    "Near_Transaction",
    "Near_SignTransactionResult",
    "Near_SignedTransaction",
    "Near_FinalExecutionOutcome",
    "Near_ExecutionStatus",
    "Near_ExecutionOutcomeWithId",
    "Near_ExecutionOutcome",
    "Near_OutcomeMetaData",
    "Near_GasProfile",
    "Near_ExecutionProof",
    "Near_FinalExecutionOutcomeWithReceipts",
    "Near_ReceiptWithId",
    "Near_Receipt",
    "Near_ActionContainer"
  ]
) {
  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

  """
  RPC Query Functions not part of JsonRpcProvider (Implemented, Tested)
  """
  getAccountState(
    accountId: String!
  ): AccountView!

  viewContractCode(
    accountId: String!
  ): ViewContractCode!

  findAccessKey(
    accountId: String!
  ): AccessKeyInfo

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

  """
  RPC Query Functions not part of JsonRpcProvider (Implemented, Tested)
  """
  getAccountBalance(
    accountId: String!
  ): AccountBalance!

  getAccountDetails(
    accountId: String!
  ): [AccountAuthorizedApp!]!

  getAccessKeys(
    accountId: String!
  ): [AccessKeyInfo!]!

  viewFunction(
    contractId: String!
    methodName: String!
    args: JSON!
  ): JSON!

  viewContractState(
    prefix: String!
    blockQuery: BlockReference!
    accountId: String!
  ): ContractStateResult!

  """
  Transaction Query Functions (Implemented, Tested)
  """
  createTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String
  ): Near_Transaction!

  signTransaction(
    transaction: Near_Transaction!
  ): Near_SignTransactionResult!

  """
  Utility Functions
  """
  parseNearAmount(
    amount: String!
  ): String!

  formatNearAmount(
    amount: String!
  ): String!

  """
  JsonRpcProvider Query Functions (Implemented, Tested)
  """
  getBlock(
    blockQuery: BlockReference!
  ): BlockResult!

  """
  JsonRpcProvider Query Functions (Implemented, Tested)
  """
  status: NodeStatusResult!

  txStatus(
    txHash: String!
    accountId: String!
  ): Near_FinalExecutionOutcome!

  txStatusReceipts(
    txHash: String!
    accountId: String!
  ): Near_FinalExecutionOutcomeWithReceipts!

  blockChanges(
    blockQuery: BlockReference!
  ): BlockChangeResult!

  chunk(
    chunkId: String!
  ): ChunkResult!

  validators(
    blockId: String
  ): EpochValidatorInfo!

  experimental_protocolConfig(
    blockReference: BlockReference!
  ): NearProtocolConfig!

  lightClientProof(
    request: LightClientProofRequest!
  ): LightClientProof!

  accessKeyChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  singleAccessKeyChanges(
    accessKeyArray: [AccessKeyWithPublicKey!]!
    blockQuery: BlockReference
  ): ChangeResult

  accountChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  contractStateChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
    keyPrefix: String
  ): ChangeResult!

  contractCodeChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  gasPrice(
    blockId: String
  ): BigInt!

  """
  JsonRpcProvider Mutation Functions
  """
  sendJsonRpc(
    method: String!
    params: JSON!
  ): JSON!

  """
  Generic Mutation Functions
  """
  requestSignTransactions(
    transactions: [Near_Transaction!]!
    callbackUrl: String
    meta: String
  ): Boolean!

  sendTransaction(
    signedTx: Near_SignedTransaction!
  ): Near_FinalExecutionOutcome!

  sendTransactionAsync(
    signedTx: Near_SignedTransaction!
  ): String!

  signAndSendTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  signAndSendTransactionAsync(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): String!

  createAccount(
    newAccountId: String!
    publicKey: Near_PublicKey!
    amount: BigInt!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  deleteAccount(
    accountId: String!
    beneficiaryId: String!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  deployContract(
    data: Bytes!
    contractId: String!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  sendMoney(
    amount: BigInt!
    receiverId: String!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  functionCall(
    contractId: String!
    methodName: String!
    args: JSON!
    gas: BigInt!
    deposit: BigInt!
    walletMeta: String
    walletCallbackUrl: String
    signerId: String
  ): Near_FinalExecutionOutcome!

  addKey(
    publicKey: Near_PublicKey!
    contractId: String
    methodNames: [String!]
    amount: BigInt
    signerId: String!
  ): Near_FinalExecutionOutcome!

  deleteKey(
    publicKey: Near_PublicKey!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  createAndDeployContract(
    contractId: String!
    publicKey: Near_PublicKey!
    data: Bytes!
    amount: BigInt!
    signerId: String!
  ): Near_FinalExecutionOutcome!
}

type BlockReference {
  block_id: String
  finality: String
  syncCheckpoint: String
}

type BlockHeader {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  hash: String!
  prev_hash: String!
  prev_state_root: String!
  chunk_receipts_root: String!
  chunk_headers_root: String!
  chunk_tx_root: String!
  outcome_root: String!
  chunks_included: BigInt!
  challenges_root: String!
  timestamp: BigInt!
  timestamp_nanosec: String!
  random_value: String!
  validator_proposals: [JSON!]!
  chunk_mask: [Boolean!]!
  gas_price: String!
  rent_paid: String!
  validator_reward: String!
  total_supply: String!
  challenges_result: [JSON!]!
  last_final_block: String!
  last_ds_final_block: String!
  next_bp_hash: String!
  block_merkle_root: String!
  approvals: [String]!
  signature: String!
  latest_protocol_version: BigInt!
}

type Chunk {
  chunk_hash: String!
  prev_block_hash: String!
  outcome_root: String!
  prev_state_root: String!
  encoded_merkle_root: String!
  encoded_length: BigInt!
  height_created: BigInt!
  height_included: BigInt!
  shard_id: BigInt!
  gas_used: BigInt!
  gas_limit: BigInt!
  rent_paid: String!
  validator_reward: String!
  balance_burnt: String!
  outgoing_receipts_root: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  signature: String!
}

type BlockResult {
  author: String!
  header: BlockHeader!
  chunks: [Chunk!]!
}

type ChunkHeader {
  balance_burnt: String!
  chunk_hash: String!
  encoded_length: BigInt!
  encoded_merkle_root: String!
  gas_limit: BigInt!
  gas_used: String!
  height_created: BigInt!
  height_included: BigInt!
  outgoing_receipts_root: String!
  prev_block_hash: String!
  prev_state_root: String!
  rent_paid: String!
  shard_id: BigInt!
  signature: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  validator_reward: String!
}

type KeyValuePair {
  key: String!
  value: String!
}

type ChunkResult {
  header: ChunkHeader!
  receipts: [JSON!]!
  transactions: [Near_Transaction!]!
}

type BlockChange {
  changeType: String!
  account_id: String!
}

type BlockChangeResult {
  block_hash: String!
  changes: [BlockChange!]!
}

type SyncInfo {
  latest_block_hash: String!
  latest_block_height: BigInt!
  latest_block_time: String!
  latest_state_root: String!
  syncing: Boolean!
}

type Version {
  version: String!
  build: String!
}

type NodeStatusResult {
  chain_id: String!
  rpc_addr: String!
  sync_info: SyncInfo!
  validators: [String!]!
  version: Version!
}

type CurrentEpochValidatorInfo {
  account_id: String!
  public_key: String!
  is_slashed: Boolean!
  stake: String!
  shards: [BigInt!]!
  num_produced_blocks: UInt!
  num_expected_blocks: UInt!
}

type NextEpochValidatorInfo {
  account_id: String!
  public_key: String!
  stake: String!
  shards: [BigInt!]!
}

type ValidatorStakeView {
  account_id: String!
  public_key: String!
  stake: String!
}

type EpochValidatorInfo {
  next_validators: [NextEpochValidatorInfo!]!
  current_validators: [CurrentEpochValidatorInfo!]!
  next_fisherman: [ValidatorStakeView!]!
  current_fisherman: [ValidatorStakeView!]!
  current_proposals: [ValidatorStakeView!]!
  prev_epoch_kickout: [ValidatorStakeView!]!
  epoch_start_height: BigInt!
  epoch_height: BigInt!
}

type NearProtocolConfig {
  runtime_config: NearProtocolRuntimeConfig!
}

type NearProtocolRuntimeConfig {
  storage_amount_per_byte: String!
}

type BlockHeaderInnerLiteView {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  prev_state_root: String!
  outcome_root: String!
  timestamp: BigInt!
  next_bp_hash: String!
  block_merkle_root: String!
}

type LightClientBlockLiteView {
  prev_block_hash: String!
  inner_rest_hash: String!
  inner_lite: BlockHeaderInnerLiteView!
}

type LightClientProof {
  outcome_proof: Near_ExecutionOutcomeWithId!
  outcome_root_proof: [Near_ExecutionProof!]!
  block_header_lite: LightClientBlockLiteView!
  block_proof: [Near_ExecutionProof!]!
}

type QueryResponseKind {
  blockHeight: BigInt!
  blockHash: String!
}

type AccountView implements QueryResponseKind {
  amount: String!
  locked: String!
  codeHash: String!
  storageUsage: BigInt!
  storagePaidAt: BigInt!
  blockHeight: BigInt!
  blockHash: String!
}

type ViewContractCode {
  code_base64: String!
  hash: String!
  block_height: BigInt!
  block_hash: String!
}

type AccountBalance {
  total: String!
  stateStaked: String!
  staked: String!
  available: String!
}

type AccountAuthorizedApp {
  contractId: String!
  amount: String!
  publicKey: String!
}

type AccessKeyPermission {
  isFullAccess: Boolean!
  receiverId: String
  methodNames: [String!]
  allowance: BigInt
}

type AccessKey {
  nonce: BigInt!
  permission: AccessKeyPermission!
}

type KeyValueCode {
  code_base64: String!
  hash: String!
  block_height: BigInt!
  block_hash: String!
}

type AccessKeyInfo {
  publicKey: String!
  accessKey: AccessKey!
}

type LightClientProofRequest {
  type: IdType!
  light_client_head: String!
  transaction_hash: String
  sender_id: String
  receipt_id: String
  receiver_id: String
}

type ChangeResult {
  block_hash: String!
  changes: [JSON!]!
}

type AccessKeyWithPublicKey {
  account_id: String!
  public_key: String!
}

type ContractStateResult {
  values: [KeyValuePair!]!
}

enum IdType {
  transaction
  receipt
}

### Imported Modules START ###

type Near_Module @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "Module"
) {
  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

  signMessage(
    message: Bytes!
    signerId: String!
  ): Near_Signature!

  """
      Creates a transaction.
If signerId is provided, the transaction will be signed using data from the KeyStore in the plugin config.
Otherwise, wallet authorization is expected.
  """
  createTransactionWithWallet(
    receiverId: String!
    actions: [Near_Action!]!
  ): Near_Transaction!

  signTransaction(
    transaction: Near_Transaction!
  ): Near_SignTransactionResult!

  sendJsonRpc(
    method: String!
    params: JSON!
  ): JSON!

  requestSignTransactions(
    transactions: [Near_Transaction!]!
    callbackUrl: String
    meta: String
  ): Boolean!

  createKey(
    accountId: String!
    networkId: String!
  ): Near_PublicKey!

  sendTransaction(
    signedTx: Near_SignedTransaction!
  ): Near_FinalExecutionOutcome!

  sendTransactionAsync(
    signedTx: Near_SignedTransaction!
  ): String!
}

### Imported Modules END ###

### Imported Objects START ###

type Near_PublicKey @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "PublicKey"
) {
  keyType: Near_KeyType!
  data: Bytes!
}

type Near_Signature @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "Signature"
) {
  keyType: Near_KeyType!
  data: Bytes!
}

type Near_Action @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "Action"
) {
  code: Bytes
  methodName: String
  args: Bytes
  gas: BigInt
  deposit: BigInt
  stake: BigInt
  publicKey: Near_PublicKey
  accessKey: Near_AccessKey
  beneficiaryId: String
}

type Near_AccessKey @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "AccessKey"
) {
  nonce: BigInt!
  permission: Near_AccessKeyPermission!
}

type Near_AccessKeyPermission @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "AccessKeyPermission"
) {
  _: String
  receiverId: String
  methodNames: [String!]
  allowance: BigInt
}

type Near_Transaction @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "Transaction"
) {
  signerId: String!
  publicKey: Near_PublicKey!
  nonce: BigInt!
  receiverId: String!
  actions: [Near_Action!]!
  blockHash: Bytes
  hash: String
}

type Near_SignTransactionResult @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "SignTransactionResult"
) {
  hash: Bytes!
  signedTx: Near_SignedTransaction!
}

type Near_SignedTransaction @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "SignedTransaction"
) {
  transaction: Near_Transaction!
  signature: Near_Signature!
}

type Near_FinalExecutionOutcome @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "FinalExecutionOutcome"
) {
  status: Near_ExecutionStatus!
  transaction: Near_Transaction!
  transaction_outcome: Near_ExecutionOutcomeWithId!
  receipts_outcome: [Near_ExecutionOutcomeWithId!]!
}

type Near_ExecutionStatus @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ExecutionStatus"
) {
  SuccessValue: String
  SuccessReceiptId: String
  failure: JSON
}

type Near_ExecutionOutcomeWithId @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ExecutionOutcomeWithId"
) {
  block_hash: String
  id: String!
  outcome: Near_ExecutionOutcome!
  proof: [Near_ExecutionProof!]
}

type Near_ExecutionOutcome @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ExecutionOutcome"
) {
  executor_id: String
  gas_burnt: BigInt!
  logs: [String!]
  metadata: Near_OutcomeMetaData
  receipt_ids: [String!]!
  status: Near_ExecutionStatus!
  tokens_burnt: String
}

type Near_OutcomeMetaData @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "OutcomeMetaData"
) {
  gas_profile: [Near_GasProfile]!
  version: UInt!
}

type Near_GasProfile @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "GasProfile"
) {
  cost: String!
  cost_category: String!
  gas_used: String!
}

type Near_ExecutionProof @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ExecutionProof"
) {
  direction: String!
  hash: String!
}

type Near_FinalExecutionOutcomeWithReceipts @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "FinalExecutionOutcomeWithReceipts"
) {
  status: Near_ExecutionStatus!
  transaction: Near_Transaction!
  transaction_outcome: Near_ExecutionOutcomeWithId!
  receipts_outcome: [Near_ExecutionOutcomeWithId!]!
  receipts: [Near_ReceiptWithId!]!
}

type Near_ReceiptWithId @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ReceiptWithId"
) {
  predecessor_id: String!
  receipt: Near_Receipt!
  receipt_id: String!
  receiver_id: String!
}

type Near_Receipt @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "Receipt"
) {
  Action: Near_ActionContainer!
}

type Near_ActionContainer @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "ActionContainer"
) {
  actions: [Near_Action!]!
}

enum Near_KeyType @imported(
  uri: "wrap://ens/nearPlugin.polywrap.eth",
  namespace: "Near",
  nativeType: "KeyType"
) {
  ED25519
}

### Imported Objects END ###

### Imported Envs START ###

### Imported Envs END ###
